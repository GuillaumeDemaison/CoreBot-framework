// Load tools library
let tools = require(__basedir + 'lib/tools');

// Requirements
let fs = require('fs');
var redis = require("redis");
let client = redis.createClient({detect_buffers: true});

// CSV
exports.run = function(bot, message, config) {
    tools.debug('debug', 'module csv run');

    // order action according to the message content
    let msg_arr = message.text.split(' ');
    console.log('>>>>>', msg_arr);

    if      (/^csv$/i.test(msg_arr['0'])) {
      if      (/^help$/i.test(msg_arr['1'])) 
        bot.reply(message, config.module.csv.msg.help);
      else if (/^get$/i.test(msg_arr['1']))     {
        exports.get_data(bot, message, __basedir + config.module.csv.file, config, function(csv_data) {
            if (csv_data !== '') 
                 bot.reply(message, config.module.csv.msg.get.ok + csv_data.split('\n- '));
            else bot.reply(message, config.module.csv.msg.get.ko);
        });
      }
      else if (/^load$/i.test(msg_arr['1']))    {
        exports.load_in_db(bot, message, config);
      }
      else if (/^test$/i.test(msg_arr['1']))    {
        exports.test_db_csv(bot, message, config);
      }
    }
};

// CSV functions loader
exports.get_data = function(bot, message, file, config, cb){
    tools.debug('debug', 'module csv get_data');

    get_csv_data(file, function(csv_data) {
        cb(csv_data);
    });
    if (csv_data !== '') res = config.module.csv.msg.get.ok;
    else                 res = config.module.csv.msg.get.ko;

    bot.reply(message, res + csv_data.split('\n- '));
};

exports.load_in_db = function(bot, message, config){
    tools.debug('debug', 'module csv load_in_db');

    // Parse CSV file and set value in redis
    fs.readFile(__basedir + config.module.csv.file, function(err, data) {
        if(err) throw err;
        var strs = [];
        var array = data.toString().split("\n");
        for(i = 0; i < array.length - 1; i++) {
            lineArr = array[i].split(';');
            strs.push(lineArr[0], lineArr[1]);
        }
        client.del(config.module.csv.storage, redis.print);
        client.hmset(config.module.csv.storage, strs, redis.print);

        if (i>0) res = config.module.csv.msg.load.ok;
        else     res = config.module.csv.msg.load.ko;
        bot.reply(message, res + '\nNb of row imported:'+i);
    });
};

exports.test_db_csv = function(bot, message, config) {
    tools.debug('debug', 'module csv test_db_csv');

    exports.get_data(bot, message, __basedir + config.module.csv.file, config, function(csv_data) {
        let csv_data_length = 0;
        if (csv_data !== '') csv_data_length = csv_data.length;

        client.get(csv_data_length, function (err, km) {
            client.hget(config.module.csv.storage, csv_data_length, function (err, kms) {
                if (km !== kms) res = config.module.csv.msg.test.ok;
                else  res = config.module.csv.msg.test.ko;
                bot.reply(message, res + '\nFile: ' + km + ' - Db: ' + kms);
            });
        });
    });
};

get_csv_data = function(file, cb) {
    tools.debug('debug', 'module csv get_csv_data ' + file);

    fs.readFile(file, function(err, data) {
        if(err) throw err;
        let strs = [];
        let array = data.toString().split("\n");
        for(let i = 0; i < array.length - 1; i++) {
            let lineArr = array[i].split(';');
            strs.push(lineArr);
        }
        cb(strs)
    });
};

